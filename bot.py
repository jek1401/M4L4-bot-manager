import sqlite3
import threading
import time
from datetime import datetime
from telebot import TeleBot
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

class TaskManager:
    def __init__(self, database):
        self.database = database
        self.create_table()

    def create_table(self):
        conn = sqlite3.connect(self.database)
        with conn:
            conn.execute("""
            CREATE TABLE IF NOT EXISTS tasks(
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            theme TEXT,
            priority TEXT CHECK(priority IN ('–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π')) DEFAULT '—Å—Ä–µ–¥–Ω–∏–π',
            deadline TEXT,
            status TEXT DEFAULT 'pending',
            user_id INTEGER NOT NULL
            )""")
            conn.execute("""
            CREATE TABLE IF NOT EXISTS users(
            user_id INTEGER PRIMARY KEY,
            points INTEGER DEFAULT 0
            )""")
            conn.commit()

    def add_task(self, user_id, name, theme, priority, deadline):
        conn = sqlite3.connect(self.database)
        with conn:
            conn.execute("INSERT INTO tasks (name, theme, priority, deadline, user_id) VALUES (?, ?, ?, ?, ?)", (name, theme, priority, deadline, user_id))
            conn.commit()

    def delete_task(self, task_name, user_id):
        conn = sqlite3.connect(self.database)
        with conn:
            conn.execute("DELETE FROM tasks WHERE name = ? AND user_id = ?", (task_name, user_id))
            conn.commit()

    def mark_task_done(self, task_name, user_id):
        conn = sqlite3.connect(self.database)
        with conn:
            conn.execute("UPDATE tasks SET status = 'done' WHERE name = ? AND user_id = ?", (task_name, user_id))
            conn.execute("INSERT INTO users (user_id, points) VALUES (?, 1) ON CONFLICT(user_id) DO UPDATE SET points = points + 1", (user_id,))
            conn.commit()

    def show_tasks(self, user_id):
        conn = sqlite3.connect(self.database)
        with conn:
            cur = conn.cursor()
            cur.execute("SELECT name, theme, priority, deadline, status FROM tasks WHERE user_id = ?", (user_id,))
            return cur.fetchall()

    def get_user_points(self, user_id):
        conn = sqlite3.connect(self.database)
        with conn:
            cur = conn.cursor()
            cur.execute("SELECT points FROM users WHERE user_id = ?", (user_id,))
            result = cur.fetchone()
            return result[0] if result else 0

bot = TeleBot("TOKEN")
task_manager = TaskManager("database.db")


@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, """–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
–ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏!

/add_task - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
/delete_task - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
/mark_done - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
/show - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
/show_high_priority - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è""")

@bot.message_handler(commands=['add_task'])
def add_task_command(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, get_task_name)

def get_task_name(message):
    user_id = message.from_user.id
    task_name = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, lambda msg: get_task_theme(msg, user_id, task_name))

def get_task_theme(message, user_id, task_name):
    theme = message.text
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –≤—ã—Å–æ–∫–∏–π):")
    bot.register_next_step_handler(message, lambda msg: get_task_priority(msg, user_id, task_name, theme))

def get_task_priority(message, user_id, task_name, theme):
    priority = message.text.lower()
    if priority not in ['–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π']:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π –∏–ª–∏ –≤—ã—Å–æ–∫–∏–π.")
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
    bot.register_next_step_handler(message, lambda msg: save_task(msg, user_id, task_name, theme, priority))

def save_task(message, user_id, task_name, theme, priority):
    deadline = message.text
    task_manager.add_task(user_id, task_name, theme, priority, deadline)
    bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")

@bot.message_handler(commands=['delete_task'])
def delete_task_command(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(message, delete_task)

def delete_task(message):
    user_id = message.from_user.id
    task_name = message.text
    task_manager.delete_task(task_name, user_id)
    bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")


@bot.message_handler(commands=['show_high_priority'])
def show_high_priority_tasks(message):
    user_id = message.from_user.id
    tasks = task_manager.show_high_priority_tasks(user_id)
    if tasks:
        response = "\n".join([task[0] for task in tasks])
        bot.send_message(message.chat.id, "üî¥ –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n" + response)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á")
@bot.message_handler(commands=['mark_done'])
def mark_done_command(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é:")
    bot.register_next_step_handler(message, mark_task_done)

def mark_task_done(message):
    user_id = message.from_user.id
    task_name = message.text
    task_manager.mark_task_done(task_name, user_id)
    bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
    
@bot.message_handler(commands=['show'])
def show_tasks(message):
    user_id = message.from_user.id
    tasks = task_manager.show_tasks(user_id)
    if not tasks:
        bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return
    
    for name, theme, priority, deadline, status in tasks:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{name}"))
        markup.add(InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{name}"))
        response = f"üìå *{name}*\nüìÇ _{theme}_\n‚ö†Ô∏è *{priority}*\n‚è≥ {deadline}\nüìç {status}"
        bot.send_message(message.chat.id, response, reply_markup=markup, parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data.startswith("done_"))
def mark_task_done_callback(call):
    task_name = call.data.split("_", 1)[1]
    user_id = call.from_user.id
    task_manager.mark_task_done(task_name, user_id)
    bot.send_message(call.message.chat.id, f"‚úÖ –ó–∞–¥–∞—á–∞ *{task_name}* –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! +1 üéâ", parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def delete_task_callback(call):
    task_name = call.data.split("_", 1)[1]
    user_id = call.from_user.id
    task_manager.delete_task(task_name, user_id)
    bot.send_message(call.message.chat.id, f"‚ùå –ó–∞–¥–∞—á–∞ *{task_name}* —É–¥–∞–ª–µ–Ω–∞!", parse_mode="Markdown")

@bot.message_handler(commands=['stats'])
def show_statistics(message):
    user_id = message.from_user.id
    points = task_manager.get_user_points(user_id)
    bot.send_message(message.chat.id, f"üèÜ –í–∞—à–∏ –±–∞–ª–ª—ã: *{points}*\nüöÄ –ß–µ–º –±–æ–ª—å—à–µ –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚Äì —Ç–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å!", parse_mode="Markdown")

@bot.message_handler(commands=['reminders'])
def send_reminders():
    while True:
        now = datetime.now().strftime('%Y-%m-%d %H:%M')
        conn = sqlite3.connect("database.db")
        cur = conn.cursor()
        cur.execute("SELECT user_id, name FROM tasks WHERE status = 'pending' AND deadline <= ?", (now,))
        tasks = cur.fetchall()
        for user_id, name in tasks:
            bot.send_message(user_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ü–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É *{name}*!", parse_mode="Markdown")
        time.sleep(60)

t = threading.Thread(target=send_reminders)
t.daemon = True
t.start()

bot.infinity_polling()
